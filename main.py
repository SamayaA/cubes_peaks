from math import factorial

def find_sum(numbers: list) -> int:
    # так как total_sum - это сумма всех вершин
    total_sum = sum(numbers)

    # так как total_sum - то сумма
    # всех вершин, то total_sum \ 2 это сумма
    #  вершн одной грани
    # total sum - сумма суммы вершин двух граней
    #  куба, которфе не имею однинаковых вершин

    # сумма вершин одной грани
    face_sum = total_sum // 2

    return face_sum

def count_combinations(length: int, amount_symbols: int) -> int:
    count = factorial(amount_symbols) // ((factorial(amount_symbols - length) * factorial(length)))
    return count

if __name__ == '__main__':
    '''
    Есть кубик.
    У кубика восемь вершин и шесть плоскостей. Нормальный обычный кубик.
    Нужно пронумеровать вершины кубика числами от 1 до 8 таким образом, чтобы суммы цифр(номеров вершин) всех плоскостей были равны между собой. Т.е. сумма вершин плоскости1 = сумме вершин плоскости 2 = ….. = сумме вершин плоскости 6.
    Вопросы:
    1. Чему равна сумма вершин каждой плоскости?
    2. Сколько вариантов расположения цифр может быть, если не принимать во внимание вращение кубика в пространстве?
    '''
    values = [i for i in range(1,9,1)]
    surface_sum = find_sum(values)
    count = count_combinations(8, 8)

    print(f'1. Чему равна сумма вершин каждой плоскости? {surface_sum}')
    print(f'2. Сколько вариантов расположения цифр может быть, если не принимать во внимание вращение кубика в пространстве? {count}')

    # верхняя грань 5 8 3 2
    # нижняя грань 4 1 6 7
    